{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst db = require(\"./db\");\nconst crypto = require(\"crypto\");\nconst nodemailer = require(\"nodemailer\");\nconst app = express();\nconst PORT = 5000;\napp.use(cors());\napp.use(bodyParser.json());\n\n// OTP Storage (can be replaced with a database in production)\nlet otpStorage = {};\n\n// Send OTP Endpoint\napp.post(\"/api/auth/send-otp\", async (req, res) => {\n  const {\n    email\n  } = req.body;\n  if (!email) return res.status(400).json({\n    error: \"Email is required\"\n  });\n  const otp = crypto.randomInt(100000, 999999); // Generate a 6-digit OTP\n  otpStorage[email] = {\n    otp,\n    expires: Date.now() + 5 * 60 * 1000\n  }; // Store OTP with 5 min expiry\n\n  // Configure nodemailer\n  const transporter = nodemailer.createTransport({\n    service: \"Gmail\",\n    auth: {\n      user: \"vemulavikas679@gmail.com\",\n      // Your email\n      pass: \"vjzw boca bnlr kjuu\" // Your application-specific password\n    }\n  });\n  const mailOptions = {\n    from: \"vemulavikas679@gmail.com\",\n    to: email,\n    subject: \"Your OTP for Signup\",\n    text: `Your OTP for verification is: ${otp}. It is valid for 5 minutes.`\n  };\n  try {\n    await transporter.sendMail(mailOptions);\n    res.json({\n      message: \"OTP sent successfully.\"\n    });\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    res.status(500).json({\n      error: \"Failed to send OTP. Try again later.\"\n    });\n  }\n});\n\n// Verify OTP Endpoint\napp.post(\"/api/auth/verify-otp\", (req, res) => {\n  const {\n    email,\n    otp\n  } = req.body;\n  const storedOtp = otpStorage[email];\n  if (!storedOtp) return res.status(400).json({\n    error: \"OTP not found for this email.\"\n  });\n  if (storedOtp.expires < Date.now()) return res.status(400).json({\n    error: \"OTP has expired.\"\n  });\n  if (storedOtp.otp !== parseInt(otp)) return res.status(400).json({\n    error: \"Invalid OTP.\"\n  });\n  res.json({\n    message: \"OTP verified successfully.\"\n  });\n});\n\n// Store Signup Data\napp.post(\"/api/auth/signup\", (req, res) => {\n  const {\n    name,\n    email,\n    password,\n    mobile\n  } = req.body;\n  const query = \"INSERT INTO users (name, email, password, mobile) VALUES (?, ?, ?, ?)\";\n  db.query(query, [name, email, password, mobile], (err, result) => {\n    if (err) {\n      console.error(\"Error inserting data:\", err);\n      res.status(500).json({\n        error: \"Failed to register user.\"\n      });\n    } else {\n      res.json({\n        message: \"User registered successfully.\"\n      });\n    }\n  });\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","bodyParser","db","crypto","nodemailer","app","PORT","use","json","otpStorage","post","req","res","email","body","status","error","otp","randomInt","expires","Date","now","transporter","createTransport","service","auth","user","pass","mailOptions","from","to","subject","text","sendMail","message","console","storedOtp","parseInt","name","password","mobile","query","err","result","listen","log"],"sources":["C:/Users/vemul/OneDrive/Documents/WEB DEV/loginargps/frontend/src/index.js"],"sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst db = require(\"./db\");\nconst crypto = require(\"crypto\");\nconst nodemailer = require(\"nodemailer\");\n\nconst app = express();\nconst PORT = 5000;\n\napp.use(cors());\napp.use(bodyParser.json());\n\n// OTP Storage (can be replaced with a database in production)\nlet otpStorage = {};\n\n// Send OTP Endpoint\napp.post(\"/api/auth/send-otp\", async (req, res) => {\n  const { email } = req.body;\n  if (!email) return res.status(400).json({ error: \"Email is required\" });\n\n  const otp = crypto.randomInt(100000, 999999); // Generate a 6-digit OTP\n  otpStorage[email] = { otp, expires: Date.now() + 5 * 60 * 1000 }; // Store OTP with 5 min expiry\n\n  // Configure nodemailer\n  const transporter = nodemailer.createTransport({\n    service: \"Gmail\",\n    auth: {\n      user: \"vemulavikas679@gmail.com\", // Your email\n      pass: \"vjzw boca bnlr kjuu\", // Your application-specific password\n    },\n  });\n\n  const mailOptions = {\n    from: \"vemulavikas679@gmail.com\",\n    to: email,\n    subject: \"Your OTP for Signup\",\n    text: `Your OTP for verification is: ${otp}. It is valid for 5 minutes.`,\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    res.json({ message: \"OTP sent successfully.\" });\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    res.status(500).json({ error: \"Failed to send OTP. Try again later.\" });\n  }\n});\n\n// Verify OTP Endpoint\napp.post(\"/api/auth/verify-otp\", (req, res) => {\n  const { email, otp } = req.body;\n  const storedOtp = otpStorage[email];\n\n  if (!storedOtp) return res.status(400).json({ error: \"OTP not found for this email.\" });\n  if (storedOtp.expires < Date.now()) return res.status(400).json({ error: \"OTP has expired.\" });\n  if (storedOtp.otp !== parseInt(otp)) return res.status(400).json({ error: \"Invalid OTP.\" });\n\n  res.json({ message: \"OTP verified successfully.\" });\n});\n\n// Store Signup Data\napp.post(\"/api/auth/signup\", (req, res) => {\n  const { name, email, password, mobile } = req.body;\n\n  const query = \"INSERT INTO users (name, email, password, mobile) VALUES (?, ?, ?, ?)\";\n  db.query(query, [name, email, password, mobile], (err, result) => {\n    if (err) {\n      console.error(\"Error inserting data:\", err);\n      res.status(500).json({ error: \"Failed to register user.\" });\n    } else {\n      res.json({ message: \"User registered successfully.\" });\n    }\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}